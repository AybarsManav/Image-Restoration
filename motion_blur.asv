im = imread("cameraman.tif");
im  = double(im);
%%
figure;
imshow(im, []);
%% Visualize Motion Blurred Image
[motion_blurred_image, H] = applyLinearMotionBlur(a, b, T, im, true);

%% Apply Inverse Filtering

filtered = inverseFilter(motion_blurred_image, H, true);

% Evaluate Performance
inverse_filtered_mse = computeMSE(im, real(filtered))
inverse_filtered_snr = computeSNR_db(im, filtered)


%% Add noise as well
mean = 127.5;
varience = 5;
noise = mean + sqrt(varience) * randn(size(im));

noisy_motion_blurred_image = motion_blurred_image + noise;

%% Apply Inverse Filtering

filtered = inverseFilter(noisy_motion_blurred_image, H, true);

inverse_filtered_noisy_mse = computeMSE(im, real(filtered))
inverse_filtered_noisy_snr = computeSNR_db(im, filtered)

%% Wiener Filtering of noisy image
k = 2;
fft_motion_blurred_noisy =  fftshift(fft2(noisy_motion_blurred_image));
wiener_transfer_func = (H .* conj(H) ./ (H .* conj(H) + k)) ./ H;
fft_estimate = wiener_transfer_func .* fft_motion_blurred_noisy;
wiener_filtered_image = ifft2(fftshift(fft_estimate), "symmetric");

figure;
subplot(2, 2, 1); imagesc(log(1 + abs(fft_motion_blurred_noisy)));
subplot(2, 2, 2); imagesc(log(1 + abs(wiener_transfer_func)));
subplot(2, 2, 3); imshow(real(wiener_filtered_image), []);
subplot(2, 2, 4); imagesc(log(1 + abs(fft_estimate)));

wiener_filtered_image = image

wiener_filtered_mse = computeMSE(im, real(wiener_filtered_image))
wiener_filtered_snr = computeSNR_db(im, real(wiener_filtered_image))

%%

%% Wiener Filtering of noisy image
k = 1;
fft_motion_blurred =  fftshift(fft2(motion_blurred_image));
wiener_transfer_func = (H .* conj(H) ./ (H .* conj(H) + k)) ./ H;
fft_estimate = wiener_transfer_func .* fft_motion_blurred;
wiener_filtered_image = ifft2(fftshift(fft_estimate), "symmetric");

figure;
subplot(2, 2, 1); imagesc(log(1 + abs(fft_motion_blurred)));
subplot(2, 2, 2); imagesc(log(1 + abs(wiener_transfer_func)));
subplot(2, 2, 3); imshow(real(wiener_filtered_image), []);
subplot(2, 2, 4); imagesc(log(1 + abs(fft_estimate)));

wiener_filtered_mse = computeMSE(im, real(wiener_filtered_image))
wiener_filtered_snr = computeSNR_db(im, real(wiener_filtered_image))
%% GEOMETRIC MEAN FILTER
alpha = 0.2;
beta = 1;
K = 5;
H_conj = conj(H);
G_M_filter = ((H_conj./(H.*H_conj)).^alpha).*(H_conj./(H_conj.*H + beta*K)).^(1-alpha);
fft_estimate_gme = G_M_filter .* fft_motion_blurred;
gme_filtered_image = ifft2(fftshift(fft_estimate_gme));
figure;
subplot(2, 2, 1); imagesc(log(1 + abs(fft_motion_blurred)));
subplot(2, 2, 2); imagesc(log(1 + abs(G_M_filter)));
subplot(2, 2, 3); imshow(real(gme_filtered_image), []);
subplot(2, 2, 4); imagesc(log(1 + abs(fft_estimate_gme)));
%% MSE computation
function MSE = computeMSE(im1, im2)
    n_elements = numel(im1);
    diff2 = (im1 - im2).^2;
    MSE = sum(diff2, "all") / n_elements;
end

%% SNR dB computation
function SNR_db = computeSNR_db(original_signal, estimated_signal)
    SNR = sum(original_signal.^2, "all") / sum( (original_signal - estimated_signal).^2, "all");
    SNR_db = 10 * log(SNR) / log(10);
end

%%
function [motion_blurred_image, motion_blur_kernel_spectrum] = applyLinearMotionBlur(a, b, T, image, plot)
% Parameters:
% a : Horizontal velocity
% b : Vertical velocity
% T : Exposure time
% image : Input image
% plot : Plot the images
% Output parameters:
% motion_blurred_image : Motion blur applied image.
% motion_blur_kernel_spectrum : Spectrum of motion blur.

image = double(image);
width = size(image, 2);
height = size(image, 1);

u = 0:width-1; u = (u - ceil(width / 2)) / width;
v = 0:height-1; v = (v - ceil(height / 2)) / height;

[U, V] = meshgrid(u, v);

H = T ./ (pi * (U * a + V * b)) .* ...
    sin(pi * (U * a + V * b)) .* ...
    exp(-1i * pi * (U * a + V * b));

% Take the limit of H as (U * a + V * b) goes to 0:
H(isnan(H)) = T; 
H(abs(H) < 1e-4) = T;

motion_blur_kernel_spectrum = H;


% Apply Motion Blur to the image in the frequency domain
fft_im = fftshift(fft2(image));
fft_h = H;
fft_multiplied = fft_im .* fft_h;
ifft_multipled = ifft2(fftshift(fft_multiplied), "symmetric");

motion_blurred_image = real(ifft_multipled);

if plot
% Visualize the magnitude and the phase
figure;
subplot(2, 1, 1); imagesc((abs(H))); title("Magnitude of H");
subplot(2, 1, 2); imagesc((angle(H))); title("Phase of H");

figure;
subplot(2, 2, 1); imagesc(log(1 + abs(fft_im))); title("FFT of Image");
subplot(2, 2, 2); imagesc(log(1 + abs(fft_h))); title("FFT of Motion Blur");
subplot(2, 2, 3); imagesc(log(1 + abs(fft_multiplied))); title("FFT of Multiplied Spectrums");
subplot(2, 2, 4); imshow(real(ifft_multipled), []); title("Motion Blurred Image");
end

end


function inverse_filtered = inverseFilter(motion_blurred_image, fft_deformation, plot)

fft_motion_blurred = fftshift(fft2(motion_blurred_image));
fft_filtered = fft_motion_blurred ./ fft_deformation;
inverse_filtered = real(ifft2(fftshift(fft_filtered), "symmetric"));

if plot    
    figure;
    subplot(2, 2, 1); imagesc(log(1 + abs(fft_motion_blurred))); title("FFT of Motion Blurred Image");
    subplot(2, 2, 2); imagesc(log(1 + abs(fft_deformation))); title("FFT of Motion Kernel");
    subplot(2, 2, 3); imagesc(log(1 + abs(fft_filtered))); title("FFT of Filtered Image");
    subplot(2, 2, 4); imshow(inverse_filtered, []); title("Restored Image");
end

end

function wiener_filtered_image = wienerFilter(noisy_motion_blurred_image, deformation_transfer_function, k, plot)

H = deformation_transfer_function;

fft_motion_blurred_noisy =  fftshift(fft2(noisy_motion_blurred_image));
wiener_transfer_func = (H .* conj(H) ./ (H .* conj(H) + k)) ./ H;
fft_estimate = wiener_transfer_func .* fft_motion_blurred_noisy;
wiener_filtered_image = real(ifft2(fftshift(fft_estimate), "symmetric"));

if plot
    figure;
    subplot(2, 2, 1); imagesc(log(1 + abs(fft_motion_blurred_noisy)));
    subplot(2, 2, 2); imagesc(log(1 + abs(wiener_transfer_func)));
    subplot(2, 2, 4); imagesc(log(1 + abs(fft_estimate)));
    subplot(2, 2, 3); imshow(wiener_filtered_image, []);
end

end